package componentForm

script PasswordInputLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('passwordInput', () => ({
			// Random Password Generator States
			isPasswordReadable: false,
			generateRandomPassword() {
				const passwordLength = 16;
				const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+';

				let passwordContent = '';
				let passwordIterationCount = 0;
				while (passwordIterationCount < passwordLength) {
					const randomIndex = Math.floor(Math.random() * chars.length);
					const indexAfterRandomIndex = randomIndex + 1;
					passwordContent += chars.substring(randomIndex, indexAfterRandomIndex);

					passwordIterationCount++;
				}

				this.shouldShowPasswordStrengthCriteria = false;
				this.updatePasswordStrengthPercentage(passwordContent);

				return passwordContent;
			},
			// Password Strength Criteria States
			shouldShowPasswordStrengthCriteria: false,
			strengthPercentage: 0,
			passwordStrengthCriteria: {},
			resetPasswordStrengthParams() {
				this.strengthPercentage = 0;
				this.passwordStrengthCriteria = {
					isLongEnough: false,
					hasNumbers: false,
					hasUppercaseChars: false,
					hasLowercaseChars: false,
					hasSpecialChars: false,
				};
			},
			updatePasswordStrengthPercentage(password) {
				this.resetPasswordStrengthParams();

				let strengthPercentage = 0
				if (password.length >= 6 && password.length <= 64) {
					this.passwordStrengthCriteria.isLongEnough = true;
					strengthPercentage += 20;
				}

				if (/[1-9]/.test(password)) {
					this.passwordStrengthCriteria.hasNumbers = true;
					strengthPercentage += 20;
				}

				if (/[A-Z]/.test(password)) {
					this.passwordStrengthCriteria.hasUppercaseChars = true;
					strengthPercentage += 20;
				}

				if (/[a-z]/.test(password)) {
					this.passwordStrengthCriteria.hasLowercaseChars = true;
					strengthPercentage += 20;
				}

				if (/[!@#\$%\^\&*\)\(+=._-]/.test(password)) {
					this.passwordStrengthCriteria.hasSpecialChars = true;
					strengthPercentage += 20;
				}

				this.strengthPercentage = strengthPercentage;
			},
		}));
	});
}

templ PasswordInput(
	id, label, bindModelPath string,
	denseMode bool,
) {
	<!-- PasswordInput JavaScript -->
	@PasswordInputLocalState()
	<!-- PasswordInput HTML -->
	<div class="space-y-2" x-data="passwordInput">
		<div class="flex space-x-2">
			<div class="relative w-full">
				<input
					@keyup="updatePasswordStrengthPercentage($event.target.value); shouldShowPasswordStrengthCriteria = true"
					x-bind:type="isPasswordReadable ? 'text' : 'password'"
					name={ id }
					x-model:value={ bindModelPath }
					autocomplete="off"
					placeholder={ label }
					if denseMode {
						class="bg-os-300 border-os-200 hover:border-os-100 autofill:bg-os-300 focus:border-os-50 h-7.5 peer relative w-full rounded-md border px-1.5 text-[13px] text-neutral-100 placeholder-transparent outline-none transition-all"
					} else {
						class="bg-os-300 border-os-200 hover:border-os-100 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
					}
				/>
				<div class="absolute right-2 top-1/2 -translate-y-1/2">
					<button type="button" class="mx-1 bg-inherit text-xl text-neutral-50" @click="isPasswordReadable = !isPasswordReadable">
						<i class="ph-duotone ph-eye-slash" x-show="!isPasswordReadable"></i>
						<i class="ph-duotone ph-eye" x-show="isPasswordReadable"></i>
					</button>
				</div>
				<label
					class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-50% to-transparent to-50% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
				>
					{ label }
				</label>
			</div>
			<div class="group relative">
				<button
					type="button"
					@click={ bindModelPath + " = generateRandomPassword()" }
					class="inline-flex items-center rounded-md border border-cyan-800 bg-cyan-950 px-3 py-2 lowercase hover:border-transparent hover:bg-cyan-800"
				>
					<i class="ph-bold ph-binary text-xl"></i>
				</button>
				<div class={ "absolute opacity-0 bottom-full mb-2 transition-all duration-300 group-hover:block group-hover:-translate-y-0.5 group-hover:opacity-100 w-max p-2 bg-cyan-900 text-white text-xs rounded-md shadow-lg" }>
					generate random password
				</div>
			</div>
		</div>
		<!-- PasswordInputStrengthProgressBar HTML -->
		<div class="bg-os-200 mb-4 h-1.5 rounded-full bg-opacity-70">
			<div x-bind:class="'bg-infinite-500 h-1.5 rounded-full w-' + strengthPercentage + '%'"></div>
		</div>
		<!-- PasswordInputStrengthCriteria HTML -->
		<div class="w-full">
			<ul x-show="shouldShowPasswordStrengthCriteria && strengthPercentage > 0">
				<li>
					<i
						x-bind:class="passwordStrengthCriteria.isLongEnough ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
					></i> Must be between 6 and 64 characters
				</li>
				<li>
					<i
						x-bind:class="passwordStrengthCriteria.hasNumbers ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
					></i> Must have at least 1 number
				</li>
				<li>
					<i
						x-bind:class="passwordStrengthCriteria.hasUppercaseChars ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
					></i> Must have at least 1 uppercase letter
				</li>
				<li>
					<i
						x-bind:class="passwordStrengthCriteria.hasLowercaseChars ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
					></i> Must have at least 1 lowercase letter
				</li>
				<li>
					<i
						x-bind:class="passwordStrengthCriteria.hasSpecialChars ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
					></i> Must have at least 1 special character
				</li>
			</ul>
		</div>
	</div>
}
